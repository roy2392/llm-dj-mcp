"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Music,
  ExternalLink,
  CheckCircle,
  AlertCircle,
  Loader2,
  User,
  Clock,
  AirplayIcon as Spotify,
} from "lucide-react"

interface Song {
  title: string
  artist: string
  genre: string
  energy: number
  reason: string
}

interface PlaylistResponse {
  playlist: Song[]
  djComment: string
  overallVibe: string
}

interface SpotifyIntegrationProps {
  playlist: PlaylistResponse
  vibe: string
}

export function SpotifyIntegration({ playlist, vibe }: SpotifyIntegrationProps) {
  const [isConnected, setIsConnected] = useState(false)
  const [accessToken, setAccessToken] = useState<string | null>(null)
  const [tokenExpiry, setTokenExpiry] = useState<number | null>(null)
  const [isConnecting, setIsConnecting] = useState(false)
  const [isCreating, setIsCreating] = useState(false)
  const [playlistName, setPlaylistName] = useState("")
  const [playlistDescription, setPlaylistDescription] = useState("")
  const [result, setResult] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)
  const [userInfo, setUserInfo] = useState<any>(null)

  // Add new state for better UX
  const [connectionStatus, setConnectionStatus] = useState<"disconnected" | "connecting" | "connected" | "error">(
    "disconnected",
  )
  const [creationProgress, setCreationProgress] = useState<string>("")
  const [retryCount, setRetryCount] = useState(0)

  // Add global error handler for unhandled promise rejections
  useEffect(() => {
    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {
      console.error("Unhandled promise rejection caught:", event.reason)
      event.preventDefault() // Prevent the default browser behavior
    }

    window.addEventListener("unhandledrejection", handleUnhandledRejection)

    return () => {
      window.removeEventListener("unhandledrejection", handleUnhandledRejection)
    }
  }, [])

  useEffect(() => {
    // Check URL params for auth results
    const urlParams = new URLSearchParams(window.location.search)
    const token = urlParams.get("spotify_token")
    const expiresIn = urlParams.get("spotify_expires_in")
    const authError = urlParams.get("spotify_error")

    if (authError) {
      console.error("Spotify auth error:", authError)
      const errorMessages = {
        access_denied: "Access denied. Please try again and grant the required permissions.",
        missing_config: "Spotify is not properly configured. Please contact support.",
        token_failed: "Failed to get access token. Please try again.",
        no_token: "No access token received. Please try again.",
        server_error: "Server error occurred. Please try again later.",
      }
      setError(errorMessages[authError as keyof typeof errorMessages] || `Authentication error: ${authError}`)

      // Clean URL
      try {
        window.history.replaceState({}, document.title, window.location.pathname)
      } catch (e) {
        console.error("Failed to clean URL:", e)
      }
    } else if (token) {
      console.log("✓ Spotify token received")
      setAccessToken(token)
      setIsConnected(true)
      setError(null)

      // Set expiry
      if (expiresIn) {
        try {
          setTokenExpiry(Date.now() + Number.parseInt(expiresIn) * 1000)
        } catch (e) {
          console.error("Failed to parse expiry:", e)
        }
      }

      // Get user info without causing promise rejections
      if (token) {
        fetchUserInfo(token)
      }

      // Clean URL
      try {
        window.history.replaceState({}, document.title, window.location.pathname)
      } catch (e) {
        console.error("Failed to clean URL:", e)
      }
    }

    // Set default playlist info
    if (playlist?.playlist?.length && vibe) {
      const shortVibe = vibe.length > 40 ? vibe.slice(0, 40) + "..." : vibe
      setPlaylistName(`DJ LLM - ${shortVibe}`)
      setPlaylistDescription(
        `🎵 AI-curated playlist for: ${vibe}\n\n🤖 Generated by DJ LLM with ${playlist.playlist.length} tracks\n✨ ${playlist.overallVibe || "Perfect vibes for your mood!"}\n\nCreated: ${new Date().toLocaleDateString()}`,
      )
    }
  }, [playlist, vibe])

  // Non-async function to fetch user info
  const fetchUserInfo = (token: string) => {
    fetch("https://api.spotify.com/v1/me", {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((response) => {
        if (response.ok) {
          return response.json()
        }
        throw new Error("Failed to fetch user info")
      })
      .then((userData) => {
        setUserInfo(userData)
        console.log("✓ User info loaded:", userData.display_name)
      })
      .catch((error) => {
        console.error("Failed to get user info:", error)
        // Don't set error state, just log it
      })
  }

  // Enhanced connection function with better error handling
  const connectToSpotify = () => {
    try {
      setConnectionStatus("connecting")
      setIsConnecting(true)
      setError(null)
      setRetryCount(0)

      // Generate random state for security
      const state = Math.random().toString(36).substring(2, 15)
      const authUrl = `/api/auth/spotify?state=${state}`

      console.log("🔗 Initiating Spotify OAuth flow...")
      console.log("Redirect URL:", authUrl)

      // Store state for validation (optional security measure)
      sessionStorage.setItem("spotify_auth_state", state)

      // Direct redirect
      window.location.href = authUrl
    } catch (error) {
      console.error("Connection error:", error)
      setError("Failed to initiate Spotify connection")
      setConnectionStatus("error")
      setIsConnecting(false)
    }
  }

  // Enhanced playlist creation with progress tracking
  const createPlaylist = () => {
    if (!accessToken || !playlist) return

    setIsCreating(true)
    setResult(null)
    setError(null)
    setCreationProgress("Initializing...")

    console.log("🎵 Creating Spotify playlist...")
    console.log("Playlist name:", playlistName)
    console.log("Description length:", playlistDescription.length)
    console.log("Songs to add:", playlist.playlist.length)

    // Show progress updates
    const progressSteps = [
      "Validating Spotify connection...",
      "Creating playlist in your account...",
      "Searching for tracks on Spotify...",
      "Adding tracks to playlist...",
      "Finalizing playlist...",
    ]

    let currentStep = 0
    const progressInterval = setInterval(() => {
      if (currentStep < progressSteps.length - 1) {
        setCreationProgress(progressSteps[currentStep])
        currentStep++
      }
    }, 1500)

    fetch("/api/spotify/create-playlist", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accessToken,
        playlistData: {
          name: playlistName,
          description: playlistDescription,
          songs: playlist.playlist,
        },
      }),
    })
      .then((response) => {
        clearInterval(progressInterval)
        setCreationProgress("Processing response...")

        if (!response.ok) {
          return response.text().then((errorText) => {
            let errorData
            try {
              errorData = JSON.parse(errorText)
            } catch {
              errorData = { error: errorText }
            }
            throw new Error(errorData.error || `HTTP ${response.status}: ${errorText}`)
          })
        }
        return response.json()
      })
      .then((data) => {
        clearInterval(progressInterval)

        if (data.success) {
          console.log("✅ Playlist created successfully!")
          console.log("Playlist URL:", data.playlistUrl)
          console.log("Tracks added:", data.tracksAdded)
          console.log("Tracks not found:", data.tracksNotFound)

          setResult(data)
          setCreationProgress("Complete!")

          // Show success message briefly
          setTimeout(() => setCreationProgress(""), 2000)
        } else {
          throw new Error(data.error || "Failed to create playlist")
        }
      })
      .catch((error) => {
        clearInterval(progressInterval)
        console.error("❌ Playlist creation error:", error)

        let errorMessage = "Failed to create playlist"

        if (error.message.includes("TOKEN_EXPIRED")) {
          errorMessage = "Your Spotify session has expired. Please reconnect your account."
          setConnectionStatus("disconnected")
          setIsConnected(false)
          setAccessToken(null)
        } else if (error.message.includes("PLAYLIST_CREATION_FAILED")) {
          errorMessage = "Failed to create playlist in Spotify. Please try again."
        } else if (error.message.includes("SERVER_ERROR")) {
          errorMessage = "Server error occurred. Please try again in a moment."
        } else {
          errorMessage = error instanceof Error ? error.message : "Unknown error occurred"
        }

        setError(errorMessage)
        setCreationProgress("")
        setRetryCount((prev) => prev + 1)
      })
      .finally(() => {
        setIsCreating(false)
      })
  }

  // Add retry functionality
  const retryCreation = () => {
    if (retryCount < 3) {
      console.log(`🔄 Retrying playlist creation (attempt ${retryCount + 1})`)
      createPlaylist()
    } else {
      setError("Maximum retry attempts reached. Please try again later or reconnect your Spotify account.")
    }
  }

  // Enhanced token expiry check
  const isTokenExpired = () => {
    if (!tokenExpiry) return false
    const timeLeft = tokenExpiry - Date.now()
    return timeLeft <= 60000 // Consider expired if less than 1 minute left
  }

  // Add token refresh warning
  const getTokenTimeLeft = () => {
    if (!tokenExpiry) return null
    const timeLeft = Math.max(0, tokenExpiry - Date.now())
    return Math.round(timeLeft / 60000) // Minutes
  }

  const resetConnection = () => {
    setIsConnected(false)
    setAccessToken(null)
    setTokenExpiry(null)
    setUserInfo(null)
    setError(null)
    setResult(null)
    setIsConnecting(false)
    setIsCreating(false)
  }

  if (!playlist || !playlist.playlist || playlist.playlist.length === 0) {
    return null
  }

  return (
    <Card className="bg-gradient-to-br from-green-900/30 to-gray-800 border-green-700 text-white">
      <CardContent className="p-6">
        <div className="flex items-center gap-3 mb-6">
          <div className="w-12 h-12 bg-green-600 rounded-full flex items-center justify-center">
            <Spotify className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-xl font-semibold">Save to Spotify</h3>
            <p className="text-sm text-gray-300">Export your AI-curated playlist to Spotify</p>
          </div>
        </div>

        {isCreating && (
          <div className="bg-blue-900/50 border border-blue-700 rounded-lg p-4 mb-4">
            <div className="flex items-center gap-3">
              <Loader2 className="w-5 h-5 animate-spin text-blue-400" />
              <div>
                <div className="font-semibold text-blue-400">Creating Your Playlist</div>
                <div className="text-sm text-gray-300">{creationProgress}</div>
              </div>
            </div>
            <div className="mt-3 bg-gray-800 rounded-full h-2">
              <div
                className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                style={{ width: isCreating ? "75%" : "0%" }}
              />
            </div>
          </div>
        )}

        {error && (
          <div className="bg-red-900/50 border border-red-700 rounded-lg p-4 mb-6">
            <div className="flex items-center gap-2 mb-2">
              <AlertCircle className="w-5 h-5 text-red-400" />
              <span className="font-semibold text-red-400">Error</span>
            </div>
            <p className="text-sm text-gray-300 mb-3">{error}</p>
            <div className="flex gap-2">
              <Button
                onClick={() => setError(null)}
                variant="ghost"
                size="sm"
                className="text-red-400 hover:text-red-300"
              >
                Dismiss
              </Button>
              {retryCount > 0 && retryCount < 3 && (
                <Button
                  onClick={retryCreation}
                  variant="ghost"
                  size="sm"
                  className="text-yellow-400 hover:text-yellow-300"
                >
                  Retry ({3 - retryCount} left)
                </Button>
              )}
              <Button onClick={resetConnection} variant="ghost" size="sm" className="text-gray-400 hover:text-gray-300">
                Reset Connection
              </Button>
            </div>
          </div>
        )}

        {!isConnected || isTokenExpired() ? (
          <div className="space-y-4">
            <div className="bg-gray-900/50 border border-gray-700 rounded-lg p-4">
              <h4 className="font-semibold mb-2">Connect Your Spotify Account</h4>
              <p className="text-sm text-gray-300 mb-3">
                We need permission to create playlists in your Spotify account.
              </p>
              <div className="text-xs text-gray-400 space-y-1">
                <div>✓ Create private playlists</div>
                <div>✓ Access your profile information</div>
                <div>✓ No access to existing playlists or listening history</div>
              </div>
            </div>

            <Button
              onClick={connectToSpotify}
              disabled={isConnecting}
              className="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3"
            >
              {isConnecting ? (
                <div className="flex items-center gap-2">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Connecting to Spotify...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Spotify className="w-5 h-5" />
                  Connect to Spotify
                </div>
              )}
            </Button>

            {isConnecting && (
              <div className="text-xs text-gray-400 text-center">
                You'll be redirected to Spotify to grant permissions...
              </div>
            )}
          </div>
        ) : result ? (
          <div className="space-y-4">
            <div className="bg-green-900/50 border border-green-700 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-3">
                <CheckCircle className="w-6 h-6 text-green-400" />
                <span className="font-semibold text-green-400 text-lg">Playlist Created! 🎉</span>
              </div>

              <div className="space-y-2 text-sm text-gray-300 mb-4">
                <div>
                  ✓ Added <strong>{result.tracksAdded}</strong> out of <strong>{playlist.playlist.length}</strong>{" "}
                  tracks
                </div>
                {result.tracksNotFound > 0 && (
                  <div className="text-yellow-300">⚠ {result.tracksNotFound} tracks couldn't be found on Spotify</div>
                )}
              </div>

              <div className="flex gap-3">
                <Button
                  onClick={() => {
                    try {
                      window.open(result.playlistUrl, "_blank")
                    } catch (e) {
                      console.error("Failed to open Spotify:", e)
                    }
                  }}
                  className="bg-green-600 hover:bg-green-700 text-white flex-1"
                >
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Open in Spotify
                </Button>
                <Button
                  onClick={() => setResult(null)}
                  variant="outline"
                  className="border-gray-600 text-gray-300 hover:bg-gray-800"
                >
                  Create Another
                </Button>
              </div>
            </div>

            {result.tracksNotFound > 0 && result.notFoundTracks && (
              <details className="bg-yellow-900/20 border border-yellow-700 rounded-lg p-3">
                <summary className="cursor-pointer text-sm font-medium text-yellow-300">
                  Show missing tracks ({result.tracksNotFound})
                </summary>
                <div className="mt-2 space-y-1 text-xs text-gray-400">
                  {result.notFoundTracks.map((track: Song, index: number) => (
                    <div key={index}>
                      • {track.title} by {track.artist}
                    </div>
                  ))}
                </div>
              </details>
            )}
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-gray-900/50 border border-gray-700 rounded-lg p-3 mb-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${isTokenExpired() ? "bg-red-500" : "bg-green-500"}`} />
                  <User className="w-4 h-4 text-green-400" />
                  <span className="text-sm text-green-400">Connected:</span>
                  <span className="font-medium">{userInfo.display_name || userInfo.id}</span>
                </div>
                <div className="flex items-center gap-3">
                  {tokenExpiry && (
                    <div
                      className={`flex items-center gap-1 text-xs ${isTokenExpired() ? "text-red-400" : "text-gray-400"}`}
                    >
                      <Clock className="w-3 h-3" />
                      {isTokenExpired() ? "Expired" : `${getTokenTimeLeft()}m left`}
                    </div>
                  )}
                  <Button
                    onClick={resetConnection}
                    variant="ghost"
                    size="sm"
                    className="text-xs text-gray-400 hover:text-gray-300"
                  >
                    Disconnect
                  </Button>
                </div>
              </div>
              {isTokenExpired() && (
                <div className="mt-2 text-xs text-red-400">
                  ⚠ Session expired. Please reconnect to create playlists.
                </div>
              )}
            </div>

            <div className="space-y-3">
              <div>
                <Label htmlFor="playlist-name" className="text-white text-sm font-medium">
                  Playlist Name
                </Label>
                <Input
                  id="playlist-name"
                  value={playlistName}
                  onChange={(e) => setPlaylistName(e.target.value)}
                  className="mt-1 bg-gray-900 border-gray-600 text-white"
                  placeholder="Enter playlist name"
                />
              </div>

              <div>
                <Label htmlFor="playlist-description" className="text-white text-sm font-medium">
                  Description
                </Label>
                <Textarea
                  id="playlist-description"
                  value={playlistDescription}
                  onChange={(e) => setPlaylistDescription(e.target.value)}
                  className="mt-1 bg-gray-900 border-gray-600 text-white min-h-[100px]"
                  placeholder="Enter playlist description"
                />
              </div>
            </div>

            <div className="bg-gray-900/50 border border-gray-700 rounded-lg p-3">
              <div className="text-sm text-gray-300">
                <div className="font-medium mb-1">Ready to create:</div>
                <div className="text-xs text-gray-400">
                  • {playlist.playlist.length} tracks will be searched and added
                  <br />• Playlist will be private by default
                  <br />• You can edit it later in Spotify
                </div>
              </div>
            </div>

            <Button
              onClick={createPlaylist}
              disabled={isCreating || !playlistName.trim()}
              className="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3"
            >
              {isCreating ? (
                <div className="flex items-center gap-2">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Creating Playlist...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Music className="w-5 h-5" />
                  Create Spotify Playlist
                </div>
              )}
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
